# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _hwfp
else:
    import _hwfp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SUCCESS = _hwfp.SUCCESS
ERR_NO_CPU_SERIAL = _hwfp.ERR_NO_CPU_SERIAL
ERR_NO_PRODUCT_UUID = _hwfp.ERR_NO_PRODUCT_UUID
ERR_UNKNOWN = _hwfp.ERR_UNKNOWN
class cpu_info_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cpu_serial = property(_hwfp.cpu_info_t_cpu_serial_get, _hwfp.cpu_info_t_cpu_serial_set)
    product_uuid = property(_hwfp.cpu_info_t_product_uuid_get, _hwfp.cpu_info_t_product_uuid_set)
    cpu_model = property(_hwfp.cpu_info_t_cpu_model_get, _hwfp.cpu_info_t_cpu_model_set)
    cpu_cores = property(_hwfp.cpu_info_t_cpu_cores_get, _hwfp.cpu_info_t_cpu_cores_set)
    cache_size = property(_hwfp.cpu_info_t_cache_size_get, _hwfp.cpu_info_t_cache_size_set)
    soc_info = property(_hwfp.cpu_info_t_soc_info_get, _hwfp.cpu_info_t_soc_info_set)

    def to_dict(self):
        return _hwfp.cpu_info_t_to_dict(self)

    def __init__(self):
        _hwfp.cpu_info_t_swiginit(self, _hwfp.new_cpu_info_t())
    __swig_destroy__ = _hwfp.delete_cpu_info_t

# Register cpu_info_t in _hwfp:
_hwfp.cpu_info_t_swigregister(cpu_info_t)

def get_cpu_identifier():
    return _hwfp.get_cpu_identifier()
MAX_LEN = _hwfp.MAX_LEN
class board_info_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    board_serial = property(_hwfp.board_info_t_board_serial_get, _hwfp.board_info_t_board_serial_set)
    board_model = property(_hwfp.board_info_t_board_model_get, _hwfp.board_info_t_board_model_set)
    vendor = property(_hwfp.board_info_t_vendor_get, _hwfp.board_info_t_vendor_set)
    board_revision = property(_hwfp.board_info_t_board_revision_get, _hwfp.board_info_t_board_revision_set)

    def to_dict(self):
        return _hwfp.board_info_t_to_dict(self)

    def __init__(self):
        _hwfp.board_info_t_swiginit(self, _hwfp.new_board_info_t())
    __swig_destroy__ = _hwfp.delete_board_info_t

# Register board_info_t in _hwfp:
_hwfp.board_info_t_swigregister(board_info_t)

def get_board_info():
    return _hwfp.get_board_info()

